    List<List<String>> maze2DString = new ArrayList<List<String>>();
    List<List<MazeSpaceClear>> maze2D = new ArrayList<List<MazeSpaceClear>>();
    List<MazeSpaceClear> mazeCurrent;
    List<List<MazeSpaceClear>> maze;


            for (int i = 0; i <= mazeHeight; i++) {
                for (int j = 0; j < mazeWidth; j++) {
                    parts = mazeString.get(j).split(" ");
                    System.out.println("i = " + i + " j = " + j + " Part = "+ parts[i]);
                }
                for (String icon : parts){
                    System.out.println("Icon: " + icon);
                }

                System.out.println(mazeString.get(i));
                maze.add()
            }

            for (String mazeItem : mazeString) {

                String a = mazeItem.substring(0,1);
                String b = mazeItem.substring(2,3);
                String c = mazeItem.substring(4,5);
                String d = mazeItem.substring(6,7);
                String e = mazeItem.substring(8,9);

                String a = mazeItem.split("");
                String b = mazeItem.split(" ");
                String c = mazeItem.split(" ");
                String d = mazeItem.split(" ");
                String e = mazeItem.split(" ");


                System.out.println(a + b + c + d + e);


                System.out.println(mazeItem);
                parts = mazeString.get().split(" ");
            }

            mazeString.forEach(maze.);

private void mazeReplace() {
    mazeString.replaceAll(x -> x.replaceAll("1", "#"));
    mazeString.replaceAll(x -> x.replaceAll(" ", ""));
    mazeString.replaceAll(x -> x.replaceAll("0", " "));
    System.out.println("\nReplacement");
    mazeString.forEach(System.out::println);
}


TO string method for Maze items old
/*
    @Override
    public String toString() {
        if (positionY == 0) {
            if (wall == true)
                return "\n#";
            else return "\n ";
        }
        else{
            if (wall == true)
                return "#";
            else return " ";
        }
    }
*/

    public enum mazeItem {
        WALL, SPACE

    }

    Potential
    String potentialMessage = "Marked Potential at: ";
    String potentialMessageLatter = " WhereWeAreGoing set to: " + whereWeAreGoingX + "," + whereWeAreGoingY;

    System.out.println("\nValues of potentials" +
                "\n checkThisY = " + checkThisY + " yP1 = " + yP1 +
                "\n checkThisX = " + checkThisX + " xP1 = " + xP1 +
                "\n checkThisX = " + checkThisX + " xS1 = " + xS1 +
                "\n checkThisY = " + checkThisY + " yS1 = " + yS1 +
                "\n" + potentialMessageLatter
        );

    Each of these System.out.printline will go at the bottom of each if statement. I have used the full if statement as an example
            if (whereWeAreGoingX != checkThisX && whereWeAreGoingY != yP1) {
                if (checkCanMoveHere(checkThisX, yP1)) {
                    setMazeSpaceClearBooleanProperty(checkThisX, yP1, MazeSpaceClearSetProperties.POTENTIAL, true);
                    System.out.println(potentialMessage + checkThisX + "," + yP1 + potentialMessageLatter);
                }
            }

    System.out.println(potentialMessage + xP1 + "," + checkThisY + potentialMessageLatter);
    System.out.println(potentialMessage + xS1 + "," + checkThisY + potentialMessageLatter);
    System.out.println(potentialMessage + checkThisX + "," + yS1 + potentialMessageLatter);



/*
        if (checkCanMoveHere(rougeNavi.getCXL(), rougeNavi.getCYLPlus1(), true)) {
            setMazeSpaceClearBooleanProperty(rougeNavi.getCXL(), rougeNavi.getCYLPlus1(), MazeSpaceClearSetProperties.FAILURE, true);
            moveRougeNavigator(rougeNavi.getCXL(), rougeNavi.getCYLPlus1(), rougeNavi);
        } else if (checkCanMoveHere((rougeNavi.getCXLPlus1()), rougeNavi.getCYL(), true)) {
            setMazeSpaceClearBooleanProperty(rougeNavi.getCXLPlus1(), rougeNavi.getCYL(), MazeSpaceClearSetProperties.FAILURE, true);
            moveRougeNavigator(rougeNavi.getCXLPlus1(), rougeNavi.getCYL(), rougeNavi);
        } else if (checkCanMoveHere(rougeNavi.getCXLMinus1(), rougeNavi.getCYL(), true)) {
            setMazeSpaceClearBooleanProperty(rougeNavi.getCXLMinus1(), rougeNavi.getCYL(), MazeSpaceClearSetProperties.FAILURE, true);
            moveRougeNavigator(rougeNavi.getCXLMinus1(), rougeNavi.getCYL(), rougeNavi);
        } else if (checkCanMoveHere(rougeNavi.getCXL(), rougeNavi.getCYLMinus1(), true)) {
            setMazeSpaceClearBooleanProperty(rougeNavi.getCXL(), rougeNavi.getCYLMinus1(), MazeSpaceClearSetProperties.FAILURE, true);
            moveRougeNavigator(rougeNavi.getCXL(), rougeNavi.getCYLMinus1(), rougeNavi);
        } else
            System.err.println("navigateMazeRouteAsFailure - Rouge Navigator could not find route. Current location of Navi: " + rougeNavi.getCXL() + "," + rougeNavi.getCYL());
*/